import numpy as np 
import pandas as pd
import time
# assuming data.csv is a CSV file with the 1st row being the names names for
# the columns


def GetUpdateTimestep(algorithm):
    """Returns the requested time value, or None if not present"""
    executive = algorithm.GetExecutive()
    outInfo = executive.GetOutputInformation(0)
    return outInfo.Get(executive.UPDATE_TIME_STEP()) \
              if outInfo.Has(executive.UPDATE_TIME_STEP()) else None


req_time = GetUpdateTimestep(self)
data=np.empty([1,3])
data_x=data[:,0]
data_y=data[:,1]
data_z=data[:,2]

current_time_simulated_file= open("./current_time_simulated.txt","r")
simulation_time=int(current_time_simulated_file.read())

if req_time > simulation_time-10 == 0:
    time.sleep(1)
    print("Displaying faster than simulating, waiting for a second..")
for i in range(0,6):
    try:
        current_data=pd.read_parquet("./csv{1}/particles_positions_{0}.parquet".format(str(int(req_time)),i)).values
        data_x=np.concatenate((data_x,current_data[:,0]))
        data_y=np.concatenate((data_y,current_data[:,1]))
        data_z=np.concatenate((data_z,current_data[:,2]))
        
    except:
        pass

current_time_file= open("./current_time.txt","w+")
current_time_file.write(str(int(req_time)))
current_time_file.close()
output.GetInformation().Set(output.DATA_TIME_STEP(), req_time)

data_x=np.delete(data_x,0)
data_y=np.delete(data_y,0)
data_z=np.delete(data_z,0)


output.RowData.append(data_x, "X")
output.RowData.append(data_y, "Y")
output.RowData.append(data_z, "Z")







def setOutputTimesteps(algorithm, timesteps):
    executive = algorithm.GetExecutive()
    outInfo = executive.GetOutputInformation(0)

    outInfo.Remove(executive.TIME_STEPS())
    for timestep in timesteps:
        outInfo.Append(executive.TIME_STEPS(), timestep)

    outInfo.Remove(executive.TIME_RANGE())
    outInfo.Append(executive.TIME_RANGE(), timesteps[0])
    outInfo.Append(executive.TIME_RANGE(), timesteps[-1])


setOutputTimesteps(self, range(0,1000))






import time
import os

if not hasattr(self, "_my_time"):
  setattr(self, "_my_time", time.time())

t = time.time()

lastTime = getattr(self, "_my_time")
# adapt here to set the time (in sec) you want to wait between updates
if t - lastTime > 2:
  setattr(self, "_my_time", t)
  self.SetNeedsUpdate(True)


